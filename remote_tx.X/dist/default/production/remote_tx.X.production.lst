

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Oct  7 05:19:39 2021

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18LF1320
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	intcodelo,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    16                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	text8,global,reloc=2,class=CODE,delta=1
    21                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    22                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    23  0000                     
    24                           ; Version 1.45
    25                           ; Generated 16/11/2017 GMT
    26                           ; 
    27                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18LF1320 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     
    59                           	psect	idataCOMRAM
    60  0002C4                     __pidataCOMRAM:
    61                           	opt stack 0
    62                           
    63                           ;initializer for _rx_state
    64  0002C4  A8                 	db	low _read_sync
    65  0002C5  02                 	db	high _read_sync
    66                           
    67                           ;initializer for _tx_state
    68  0002C6  CA                 	db	low _idle
    69  0002C7  02                 	db	high _idle
    70                           
    71                           ;initializer for _prev_value
    72  0002C8  FF                 	db	255
    73                           
    74                           ;initializer for _value
    75  0002C9  FF                 	db	255
    76  0000                     _TMR0	set	4054
    77  0000                     _RCREG	set	4014
    78  0000                     _INTCONbits	set	4082
    79  0000                     _T0CON	set	4053
    80  0000                     _PIE1bits	set	3997
    81  0000                     _PIR1bits	set	3998
    82  0000                     _SPBRG	set	4015
    83  0000                     _BAUDCTL	set	4010
    84  0000                     _TXSTA	set	4012
    85  0000                     _RCSTA	set	4011
    86  0000                     _LATAbits	set	3977
    87  0000                     _TRISAbits	set	3986
    88  0000                     _ADCON1	set	4033
    89  0000                     _OSCCON	set	4051
    90  0000                     _TXREG	set	4013
    91  0000                     _PORTA	set	3968
    92                           
    93                           ; #config settings
    94  0000                     
    95                           	psect	cinit
    96  00023A                     __pcinit:
    97                           	opt stack 0
    98  00023A                     start_initialization:
    99                           	opt stack 0
   100  00023A                     __initialization:
   101                           	opt stack 0
   102                           
   103                           ; Initialize objects allocated to COMRAM (6 bytes)
   104                           ; load TBLPTR registers with __pidataCOMRAM
   105  00023A  0EC4               	movlw	low __pidataCOMRAM
   106  00023C  6EF6               	movwf	tblptrl,c
   107  00023E  0E02               	movlw	high __pidataCOMRAM
   108  000240  6EF7               	movwf	tblptrh,c
   109  000242  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   110  000244  6EF8               	movwf	tblptru,c
   111  000246  EE00  F029         	lfsr	0,__pdataCOMRAM
   112  00024A  EE10 F006          	lfsr	1,6
   113  00024E                     copy_data0:
   114  00024E  0009               	tblrd		*+
   115  000250  CFF5 FFEE          	movff	tablat,postinc0
   116  000254  50E5               	movf	postdec1,w,c
   117  000256  50E1               	movf	fsr1l,w,c
   118  000258  E1FA               	bnz	copy_data0
   119                           
   120                           ; Clear objects allocated to COMRAM (3 bytes)
   121  00025A  6A31               	clrf	(__pbssCOMRAM+2)& (0+255),c
   122  00025C  6A30               	clrf	(__pbssCOMRAM+1)& (0+255),c
   123  00025E  6A2F               	clrf	__pbssCOMRAM& (0+255),c
   124  000260                     end_of_initialization:
   125                           	opt stack 0
   126  000260                     __end_of__initialization:
   127                           	opt stack 0
   128  000260  9032               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   129  000262  9232               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   130  000264  0E00               	movlw	low (__Lmediumconst shr (0+16))
   131  000266  6EF8               	movwf	tblptru,c
   132  000268  0100               	movlb	0
   133  00026A  EFF1  F000         	goto	_main	;jump to C main() function
   134                           tblptru	equ	0xFF8
   135                           tblptrh	equ	0xFF7
   136                           tblptrl	equ	0xFF6
   137                           tablat	equ	0xFF5
   138                           postinc0	equ	0xFEE
   139                           postdec1	equ	0xFE5
   140                           fsr1l	equ	0xFE1
   141                           
   142                           	psect	bssCOMRAM
   143  00002F                     __pbssCOMRAM:
   144                           	opt stack 0
   145  00002F                     _code:
   146                           	opt stack 0
   147  00002F                     	ds	1
   148  000030                     _serial_in:
   149                           	opt stack 0
   150  000030                     	ds	1
   151  000031                     _flags:
   152                           	opt stack 0
   153  000031                     	ds	1
   154                           tblptru	equ	0xFF8
   155                           tblptrh	equ	0xFF7
   156                           tblptrl	equ	0xFF6
   157                           tablat	equ	0xFF5
   158                           postinc0	equ	0xFEE
   159                           postdec1	equ	0xFE5
   160                           fsr1l	equ	0xFE1
   161                           
   162                           	psect	dataCOMRAM
   163  000029                     __pdataCOMRAM:
   164                           	opt stack 0
   165  000029                     _rx_state:
   166                           	opt stack 0
   167  000029                     	ds	2
   168  00002B                     _tx_state:
   169                           	opt stack 0
   170  00002B                     	ds	2
   171  00002D                     _prev_value:
   172                           	opt stack 0
   173  00002D                     	ds	1
   174  00002E                     _value:
   175                           	opt stack 0
   176  00002E                     	ds	1
   177                           tblptru	equ	0xFF8
   178                           tblptrh	equ	0xFF7
   179                           tblptrl	equ	0xFF6
   180                           tablat	equ	0xFF5
   181                           postinc0	equ	0xFEE
   182                           postdec1	equ	0xFE5
   183                           fsr1l	equ	0xFE1
   184                           
   185                           	psect	cstackCOMRAM
   186  000001                     __pcstackCOMRAM:
   187                           	opt stack 0
   188  000001                     ??_isr:
   189                           
   190                           ; 1 bytes @ 0x0
   191  000001                     	ds	19
   192  000014                     ??_isr1:
   193                           
   194                           ; 1 bytes @ 0x13
   195  000014                     	ds	21
   196  000029                     tblptru	equ	0xFF8
   197                           tblptrh	equ	0xFF7
   198                           tblptrl	equ	0xFF6
   199                           tablat	equ	0xFF5
   200                           postinc0	equ	0xFEE
   201                           postdec1	equ	0xFE5
   202                           fsr1l	equ	0xFE1
   203                           
   204                           ; 1 bytes @ 0x28
   205 ;;
   206 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   207 ;;
   208 ;; *************** function _main *****************
   209 ;; Defined at:
   210 ;;		line 167 in file "mane.c"
   211 ;; Parameters:    Size  Location     Type
   212 ;;		None
   213 ;; Auto vars:     Size  Location     Type
   214 ;;		None
   215 ;; Return value:  Size  Location     Type
   216 ;;                  1    wreg      void 
   217 ;; Registers used:
   218 ;;		wreg, status,2, status,0, pclath, tosl, cstack
   219 ;; Tracked objects:
   220 ;;		On entry : 0/0
   221 ;;		On exit  : 0/0
   222 ;;		Unchanged: 0/0
   223 ;; Data sizes:     COMRAM   BANK0
   224 ;;      Params:         0       0
   225 ;;      Locals:         0       0
   226 ;;      Temps:          0       0
   227 ;;      Totals:         0       0
   228 ;;Total ram usage:        0 bytes
   229 ;; Hardware stack levels required when called:    4
   230 ;; This function calls:
   231 ;;		_idle
   232 ;;		_send_data
   233 ;;		_send_sync
   234 ;; This function is called by:
   235 ;;		Startup code after reset
   236 ;; This function uses a non-reentrant model
   237 ;;
   238                           
   239                           	psect	text0
   240  0001E2                     __ptext0:
   241                           	opt stack 0
   242  0001E2                     _main:
   243                           	opt stack 27
   244                           
   245                           ;mane.c: 169: OSCCON = 0b01110000;
   246                           
   247                           ;incstack = 0
   248  0001E2  0E70               	movlw	112
   249  0001E4  6ED3               	movwf	4051,c	;volatile
   250                           
   251                           ;mane.c: 171: ADCON1 = 0xff;
   252  0001E6  68C1               	setf	4033,c	;volatile
   253                           
   254                           ;mane.c: 173: TRISAbits.TRISA0 = 1;
   255  0001E8  8092               	bsf	3986,0,c	;volatile
   256                           
   257                           ;mane.c: 174: TRISAbits.TRISA1 = 1;
   258  0001EA  8292               	bsf	3986,1,c	;volatile
   259                           
   260                           ;mane.c: 177: TRISAbits.TRISA6 = 0;
   261  0001EC  9C92               	bcf	3986,6,c	;volatile
   262                           
   263                           ;mane.c: 178: LATAbits.LATA6 = 1;
   264  0001EE  8C89               	bsf	3977,6,c	;volatile
   265                           
   266                           ;mane.c: 180: flags.value = 0;
   267  0001F0  0E00               	movlw	0
   268  0001F2  6E31               	movwf	_flags,c
   269                           
   270                           ;mane.c: 182: RCSTA = 0b10010000;
   271  0001F4  0E90               	movlw	144
   272  0001F6  6EAB               	movwf	4011,c	;volatile
   273                           
   274                           ;mane.c: 183: TXSTA = 0b00100100;
   275  0001F8  0E24               	movlw	36
   276  0001FA  6EAC               	movwf	4012,c	;volatile
   277                           
   278                           ;mane.c: 184: BAUDCTL = 0b00001000;
   279  0001FC  0E08               	movlw	8
   280  0001FE  6EAA               	movwf	4010,c	;volatile
   281                           
   282                           ;mane.c: 186: SPBRG = (8000000 / (115200 * 4));
   283  000200  0E11               	movlw	17
   284  000202  6EAF               	movwf	4015,c	;volatile
   285                           
   286                           ;mane.c: 188: PIR1bits.RCIF = 0;
   287  000204  9A9E               	bcf	3998,5,c	;volatile
   288                           
   289                           ;mane.c: 189: PIE1bits.RCIE = 1;
   290  000206  8A9D               	bsf	3997,5,c	;volatile
   291                           
   292                           ;mane.c: 193: T0CON = 0b10000000;
   293  000208  0E80               	movlw	128
   294  00020A  6ED5               	movwf	4053,c	;volatile
   295                           
   296                           ;mane.c: 194: TMR0 = -40000;
   297  00020C  0E63               	movlw	99
   298  00020E  6ED7               	movwf	4055,c	;volatile
   299  000210  0EC0               	movlw	192
   300  000212  6ED6               	movwf	4054,c	;volatile
   301                           
   302                           ;mane.c: 196: INTCONbits.TMR0IF = 0;
   303  000214  94F2               	bcf	intcon,2,c	;volatile
   304                           
   305                           ;mane.c: 197: INTCONbits.TMR0IE = 1;
   306  000216  8AF2               	bsf	intcon,5,c	;volatile
   307                           
   308                           ;mane.c: 198: INTCONbits.PEIE = 1;
   309  000218  8CF2               	bsf	intcon,6,c	;volatile
   310                           
   311                           ;mane.c: 199: INTCONbits.GIE = 1;
   312  00021A  8EF2               	bsf	intcon,7,c	;volatile
   313  00021C                     l72:
   314  00021C  0004               	clrwdt		;# 
   315                           
   316                           ;mane.c: 204: if(PIR1bits.TXIF)
   317  00021E  A89E               	btfss	3998,4,c	;volatile
   318  000220  D7FD               	goto	l72
   319                           
   320                           ;mane.c: 205: {
   321                           ;mane.c: 206: tx_state();
   322  000222  D801               	call	u48
   323  000224  D7FB               	goto	l72
   324  000226                     u48:
   325  000226  0005               	push	
   326  000228  6EFA               	movwf	pclath,c
   327  00022A  502B               	movf	_tx_state,w,c
   328  00022C  6EFD               	movwf	tosl,c
   329  00022E  502C               	movf	_tx_state+1,w,c
   330  000230  6EFE               	movwf	tosh,c
   331  000232  50F8               	movf	tblptru,w,c
   332  000234  6EFF               	movwf	tosu,c
   333  000236  50FA               	movf	pclath,w,c
   334  000238  0012               	return		;indir
   335  00023A                     __end_of_main:
   336                           	opt stack 0
   337                           tosu	equ	0xFFF
   338                           tosh	equ	0xFFE
   339                           tosl	equ	0xFFD
   340                           pclath	equ	0xFFA
   341                           tblptru	equ	0xFF8
   342                           tblptrh	equ	0xFF7
   343                           tblptrl	equ	0xFF6
   344                           tablat	equ	0xFF5
   345                           intcon	equ	0xFF2
   346                           postinc0	equ	0xFEE
   347                           postdec1	equ	0xFE5
   348                           fsr1l	equ	0xFE1
   349                           
   350 ;; *************** function _send_data *****************
   351 ;; Defined at:
   352 ;;		line 127 in file "mane.c"
   353 ;; Parameters:    Size  Location     Type
   354 ;;		None
   355 ;; Auto vars:     Size  Location     Type
   356 ;;		None
   357 ;; Return value:  Size  Location     Type
   358 ;;                  1    wreg      void 
   359 ;; Registers used:
   360 ;;		wreg, status,2, status,0
   361 ;; Tracked objects:
   362 ;;		On entry : 0/0
   363 ;;		On exit  : 0/0
   364 ;;		Unchanged: 0/0
   365 ;; Data sizes:     COMRAM   BANK0
   366 ;;      Params:         0       0
   367 ;;      Locals:         0       0
   368 ;;      Temps:          0       0
   369 ;;      Totals:         0       0
   370 ;;Total ram usage:        0 bytes
   371 ;; Hardware stack levels used:    1
   372 ;; Hardware stack levels required when called:    3
   373 ;; This function calls:
   374 ;;		Nothing
   375 ;; This function is called by:
   376 ;;		_send_sync
   377 ;;		_main
   378 ;; This function uses a non-reentrant model
   379 ;;
   380                           
   381                           	psect	text1
   382  00026E                     __ptext1:
   383                           	opt stack 0
   384  00026E                     _send_data:
   385                           	opt stack 27
   386                           
   387                           ;mane.c: 129: code = PORTA;
   388                           
   389                           ;incstack = 0
   390  00026E  CF80 F02F          	movff	3968,_code	;volatile
   391                           
   392                           ;mane.c: 130: code &= 0x3;
   393  000272  0E03               	movlw	3
   394  000274  162F               	andwf	_code,f,c
   395                           
   396                           ;mane.c: 131: code |= code << 2;
   397  000276  442F               	rlncf	_code,w,c
   398  000278  46E8               	rlncf	wreg,f,c
   399  00027A  0BFC               	andlw	252
   400  00027C  122F               	iorwf	_code,f,c
   401                           
   402                           ;mane.c: 132: code |= code << 4;
   403  00027E  382F               	swapf	_code,w,c
   404  000280  0BF0               	andlw	240
   405  000282  122F               	iorwf	_code,f,c
   406                           
   407                           ;mane.c: 133: code ^= 0b11011000;
   408  000284  0ED8               	movlw	216
   409  000286  1A2F               	xorwf	_code,f,c
   410                           
   411                           ;mane.c: 134: TXREG = code;
   412  000288  C02F  FFAD         	movff	_code,4013	;volatile
   413                           
   414                           ;mane.c: 135: tx_state = idle;
   415  00028C  0ECA               	movlw	low _idle
   416  00028E  6E2B               	movwf	_tx_state,c
   417  000290  0E02               	movlw	high _idle
   418  000292  6E2C               	movwf	_tx_state+1,c
   419  000294  0012               	return		;funcret
   420  000296                     __end_of_send_data:
   421                           	opt stack 0
   422                           tosu	equ	0xFFF
   423                           tosh	equ	0xFFE
   424                           tosl	equ	0xFFD
   425                           pclath	equ	0xFFA
   426                           tblptru	equ	0xFF8
   427                           tblptrh	equ	0xFF7
   428                           tblptrl	equ	0xFF6
   429                           tablat	equ	0xFF5
   430                           intcon	equ	0xFF2
   431                           postinc0	equ	0xFEE
   432                           wreg	equ	0xFE8
   433                           postdec1	equ	0xFE5
   434                           fsr1l	equ	0xFE1
   435                           
   436 ;; *************** function _idle *****************
   437 ;; Defined at:
   438 ;;		line 145 in file "mane.c"
   439 ;; Parameters:    Size  Location     Type
   440 ;;		None
   441 ;; Auto vars:     Size  Location     Type
   442 ;;		None
   443 ;; Return value:  Size  Location     Type
   444 ;;                  1    wreg      void 
   445 ;; Registers used:
   446 ;;		None
   447 ;; Tracked objects:
   448 ;;		On entry : 0/0
   449 ;;		On exit  : 0/0
   450 ;;		Unchanged: 0/0
   451 ;; Data sizes:     COMRAM   BANK0
   452 ;;      Params:         0       0
   453 ;;      Locals:         0       0
   454 ;;      Temps:          0       0
   455 ;;      Totals:         0       0
   456 ;;Total ram usage:        0 bytes
   457 ;; Hardware stack levels used:    1
   458 ;; Hardware stack levels required when called:    3
   459 ;; This function calls:
   460 ;;		Nothing
   461 ;; This function is called by:
   462 ;;		_send_data
   463 ;;		_main
   464 ;; This function uses a non-reentrant model
   465 ;;
   466                           
   467                           	psect	text2
   468  0002CA                     __ptext2:
   469                           	opt stack 0
   470  0002CA                     _idle:
   471                           	opt stack 27
   472                           
   473                           ;incstack = 0
   474  0002CA  0012               	return		;funcret
   475  0002CC                     __end_of_idle:
   476                           	opt stack 0
   477                           tosu	equ	0xFFF
   478                           tosh	equ	0xFFE
   479                           tosl	equ	0xFFD
   480                           pclath	equ	0xFFA
   481                           tblptru	equ	0xFF8
   482                           tblptrh	equ	0xFF7
   483                           tblptrl	equ	0xFF6
   484                           tablat	equ	0xFF5
   485                           intcon	equ	0xFF2
   486                           postinc0	equ	0xFEE
   487                           wreg	equ	0xFE8
   488                           postdec1	equ	0xFE5
   489                           fsr1l	equ	0xFE1
   490                           
   491 ;; *************** function _send_sync *****************
   492 ;; Defined at:
   493 ;;		line 139 in file "mane.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;		None
   496 ;; Auto vars:     Size  Location     Type
   497 ;;		None
   498 ;; Return value:  Size  Location     Type
   499 ;;                  1    wreg      void 
   500 ;; Registers used:
   501 ;;		wreg, status,2, status,0
   502 ;; Tracked objects:
   503 ;;		On entry : 0/0
   504 ;;		On exit  : 0/0
   505 ;;		Unchanged: 0/0
   506 ;; Data sizes:     COMRAM   BANK0
   507 ;;      Params:         0       0
   508 ;;      Locals:         0       0
   509 ;;      Temps:          0       0
   510 ;;      Totals:         0       0
   511 ;;Total ram usage:        0 bytes
   512 ;; Hardware stack levels used:    1
   513 ;; Hardware stack levels required when called:    3
   514 ;; This function calls:
   515 ;;		Nothing
   516 ;; This function is called by:
   517 ;;		_isr
   518 ;;		_main
   519 ;; This function uses a non-reentrant model
   520 ;;
   521                           
   522                           	psect	text3
   523  0002B8                     __ptext3:
   524                           	opt stack 0
   525  0002B8                     _send_sync:
   526                           	opt stack 27
   527                           
   528                           ;mane.c: 141: TXREG = 0xff;
   529                           
   530                           ;incstack = 0
   531  0002B8  68AD               	setf	4013,c	;volatile
   532                           
   533                           ;mane.c: 142: tx_state = send_data;
   534  0002BA  0E6E               	movlw	low _send_data
   535  0002BC  6E2B               	movwf	_tx_state,c
   536  0002BE  0E02               	movlw	high _send_data
   537  0002C0  6E2C               	movwf	_tx_state+1,c
   538  0002C2  0012               	return		;funcret
   539  0002C4                     __end_of_send_sync:
   540                           	opt stack 0
   541                           tosu	equ	0xFFF
   542                           tosh	equ	0xFFE
   543                           tosl	equ	0xFFD
   544                           pclath	equ	0xFFA
   545                           tblptru	equ	0xFF8
   546                           tblptrh	equ	0xFF7
   547                           tblptrl	equ	0xFF6
   548                           tablat	equ	0xFF5
   549                           intcon	equ	0xFF2
   550                           postinc0	equ	0xFEE
   551                           wreg	equ	0xFE8
   552                           postdec1	equ	0xFE5
   553                           fsr1l	equ	0xFE1
   554                           
   555 ;; *************** function _isr1 *****************
   556 ;; Defined at:
   557 ;;		line 212 in file "mane.c"
   558 ;; Parameters:    Size  Location     Type
   559 ;;		None
   560 ;; Auto vars:     Size  Location     Type
   561 ;;		None
   562 ;; Return value:  Size  Location     Type
   563 ;;                  1    wreg      void 
   564 ;; Registers used:
   565 ;;		None
   566 ;; Tracked objects:
   567 ;;		On entry : 0/0
   568 ;;		On exit  : 0/0
   569 ;;		Unchanged: 0/0
   570 ;; Data sizes:     COMRAM   BANK0
   571 ;;      Params:         0       0
   572 ;;      Locals:         0       0
   573 ;;      Temps:         21       0
   574 ;;      Totals:        21       0
   575 ;;Total ram usage:       21 bytes
   576 ;; Hardware stack levels used:    1
   577 ;; Hardware stack levels required when called:    2
   578 ;; This function calls:
   579 ;;		Nothing
   580 ;; This function is called by:
   581 ;;		Interrupt level 1
   582 ;; This function uses a non-reentrant model
   583 ;;
   584                           
   585                           	psect	intcodelo
   586  000018                     __pintcodelo:
   587                           	opt stack 0
   588  000018                     _isr1:
   589                           	opt stack 27
   590                           
   591                           ;incstack = 0
   592  000018  8032               	bsf	btemp,0,c	;set compiler interrupt flag (level 1)
   593  00001A  CFD8 F014          	movff	status,??_isr1
   594  00001E  CFE8 F015          	movff	wreg,??_isr1+1
   595  000022  CFE0 F016          	movff	bsr,??_isr1+2
   596  000026  CFFA F017          	movff	pclath,??_isr1+3
   597  00002A  CFFB F018          	movff	pclatu,??_isr1+4
   598  00002E  CFE9 F019          	movff	fsr0l,??_isr1+5
   599  000032  CFEA F01A          	movff	fsr0h,??_isr1+6
   600  000036  CFE1 F01B          	movff	fsr1l,??_isr1+7
   601  00003A  CFE2 F01C          	movff	fsr1h,??_isr1+8
   602  00003E  CFD9 F01D          	movff	fsr2l,??_isr1+9
   603  000042  CFDA F01E          	movff	fsr2h,??_isr1+10
   604  000046  CFF3 F01F          	movff	prodl,??_isr1+11
   605  00004A  CFF4 F020          	movff	prodh,??_isr1+12
   606  00004E  CFF6 F021          	movff	tblptrl,??_isr1+13
   607  000052  CFF7 F022          	movff	tblptrh,??_isr1+14
   608  000056  CFF8 F023          	movff	tblptru,??_isr1+15
   609  00005A  CFF5 F024          	movff	tablat,??_isr1+16
   610  00005E  C032  F025         	movff	btemp,??_isr1+17
   611  000062  C033  F026         	movff	btemp+1,??_isr1+18
   612  000066  C034  F027         	movff	btemp+2,??_isr1+19
   613  00006A  C035  F028         	movff	btemp+3,??_isr1+20
   614  00006E  C028  F035         	movff	??_isr1+20,btemp+3
   615  000072  C027  F034         	movff	??_isr1+19,btemp+2
   616  000076  C026  F033         	movff	??_isr1+18,btemp+1
   617  00007A  C025  F032         	movff	??_isr1+17,btemp
   618  00007E  C024  FFF5         	movff	??_isr1+16,tablat
   619  000082  C023  FFF8         	movff	??_isr1+15,tblptru
   620  000086  C022  FFF7         	movff	??_isr1+14,tblptrh
   621  00008A  C021  FFF6         	movff	??_isr1+13,tblptrl
   622  00008E  C020  FFF4         	movff	??_isr1+12,prodh
   623  000092  C01F  FFF3         	movff	??_isr1+11,prodl
   624  000096  C01E  FFDA         	movff	??_isr1+10,fsr2h
   625  00009A  C01D  FFD9         	movff	??_isr1+9,fsr2l
   626  00009E  C01C  FFE2         	movff	??_isr1+8,fsr1h
   627  0000A2  C01B  FFE1         	movff	??_isr1+7,fsr1l
   628  0000A6  C01A  FFEA         	movff	??_isr1+6,fsr0h
   629  0000AA  C019  FFE9         	movff	??_isr1+5,fsr0l
   630  0000AE  C018  FFFB         	movff	??_isr1+4,pclatu
   631  0000B2  C017  FFFA         	movff	??_isr1+3,pclath
   632  0000B6  C016  FFE0         	movff	??_isr1+2,bsr
   633  0000BA  C015  FFE8         	movff	??_isr1+1,wreg
   634  0000BE  C014  FFD8         	movff	??_isr1,status
   635  0000C2  9032               	bcf	btemp,0,c	;clear compiler interrupt flag (level 1)
   636  0000C4  0010               	retfie	
   637  0000C6                     __end_of_isr1:
   638                           	opt stack 0
   639                           tosu	equ	0xFFF
   640                           tosh	equ	0xFFE
   641                           tosl	equ	0xFFD
   642                           pclatu	equ	0xFFB
   643                           pclath	equ	0xFFA
   644                           tblptru	equ	0xFF8
   645                           tblptrh	equ	0xFF7
   646                           tblptrl	equ	0xFF6
   647                           tablat	equ	0xFF5
   648                           prodh	equ	0xFF4
   649                           prodl	equ	0xFF3
   650                           intcon	equ	0xFF2
   651                           postinc0	equ	0xFEE
   652                           fsr0h	equ	0xFEA
   653                           fsr0l	equ	0xFE9
   654                           wreg	equ	0xFE8
   655                           postdec1	equ	0xFE5
   656                           fsr1h	equ	0xFE2
   657                           fsr1l	equ	0xFE1
   658                           bsr	equ	0xFE0
   659                           fsr2h	equ	0xFDA
   660                           fsr2l	equ	0xFD9
   661                           status	equ	0xFD8
   662                           
   663 ;; *************** function _isr *****************
   664 ;; Defined at:
   665 ;;		line 216 in file "mane.c"
   666 ;; Parameters:    Size  Location     Type
   667 ;;		None
   668 ;; Auto vars:     Size  Location     Type
   669 ;;		None
   670 ;; Return value:  Size  Location     Type
   671 ;;                  1    wreg      void 
   672 ;; Registers used:
   673 ;;		wreg, status,2, status,0, pclath, tosl, cstack
   674 ;; Tracked objects:
   675 ;;		On entry : 0/0
   676 ;;		On exit  : 0/0
   677 ;;		Unchanged: 0/0
   678 ;; Data sizes:     COMRAM   BANK0
   679 ;;      Params:         0       0
   680 ;;      Locals:         0       0
   681 ;;      Temps:         19       0
   682 ;;      Totals:        19       0
   683 ;;Total ram usage:       19 bytes
   684 ;; Hardware stack levels used:    1
   685 ;; Hardware stack levels required when called:    1
   686 ;; This function calls:
   687 ;;		_read_ack
   688 ;;		_read_sync
   689 ;; This function is called by:
   690 ;;		Interrupt level 2
   691 ;; This function uses a non-reentrant model
   692 ;;
   693                           
   694                           	psect	intcode
   695  000008                     __pintcode:
   696                           	opt stack 0
   697  000008                     _isr:
   698                           	opt stack 27
   699                           
   700                           ;incstack = 0
   701  000008  8232               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
   702  00000A  EF65  F000         	goto	int_func
   703                           tosu	equ	0xFFF
   704                           tosh	equ	0xFFE
   705                           tosl	equ	0xFFD
   706                           pclatu	equ	0xFFB
   707                           pclath	equ	0xFFA
   708                           tblptru	equ	0xFF8
   709                           tblptrh	equ	0xFF7
   710                           tblptrl	equ	0xFF6
   711                           tablat	equ	0xFF5
   712                           prodh	equ	0xFF4
   713                           prodl	equ	0xFF3
   714                           intcon	equ	0xFF2
   715                           postinc0	equ	0xFEE
   716                           fsr0h	equ	0xFEA
   717                           fsr0l	equ	0xFE9
   718                           wreg	equ	0xFE8
   719                           postdec1	equ	0xFE5
   720                           fsr1h	equ	0xFE2
   721                           fsr1l	equ	0xFE1
   722                           bsr	equ	0xFE0
   723                           fsr2h	equ	0xFDA
   724                           fsr2l	equ	0xFD9
   725                           status	equ	0xFD8
   726                           
   727                           	psect	intcode_body
   728  0000CA                     __pintcode_body:
   729                           	opt stack 27
   730  0000CA                     int_func:
   731                           	opt stack 27
   732  0000CA  CFFA F002          	movff	pclath,??_isr+1
   733  0000CE  CFFB F003          	movff	pclatu,??_isr+2
   734  0000D2  CFE9 F004          	movff	fsr0l,??_isr+3
   735  0000D6  CFEA F005          	movff	fsr0h,??_isr+4
   736  0000DA  CFE1 F006          	movff	fsr1l,??_isr+5
   737  0000DE  CFE2 F007          	movff	fsr1h,??_isr+6
   738  0000E2  CFD9 F008          	movff	fsr2l,??_isr+7
   739  0000E6  CFDA F009          	movff	fsr2h,??_isr+8
   740  0000EA  CFF3 F00A          	movff	prodl,??_isr+9
   741  0000EE  CFF4 F00B          	movff	prodh,??_isr+10
   742  0000F2  CFF6 F00C          	movff	tblptrl,??_isr+11
   743  0000F6  CFF7 F00D          	movff	tblptrh,??_isr+12
   744  0000FA  CFF8 F00E          	movff	tblptru,??_isr+13
   745  0000FE  CFF5 F00F          	movff	tablat,??_isr+14
   746  000102  C032  F010         	movff	btemp,??_isr+15
   747  000106  C033  F011         	movff	btemp+1,??_isr+16
   748  00010A  C034  F012         	movff	btemp+2,??_isr+17
   749  00010E  C035  F013         	movff	btemp+3,??_isr+18
   750                           
   751                           ;mane.c: 218: flags.interrupt_complete = 0;
   752  000112  9031               	bcf	_flags,0,c
   753                           
   754                           ;mane.c: 221: while(!flags.interrupt_complete)
   755  000114  D03E               	goto	i2u12_49
   756  000116                     i2l87:
   757                           
   758                           ;mane.c: 222: {
   759                           ;mane.c: 223: flags.interrupt_complete = 1;
   760  000116  8031               	bsf	_flags,0,c
   761                           
   762                           ;mane.c: 225: if(INTCONbits.TMR0IF)
   763  000118  A4F2               	btfss	intcon,2,c	;volatile
   764  00011A  D029               	goto	i2l93
   765                           
   766                           ;mane.c: 226: {
   767                           ;mane.c: 227: INTCONbits.TMR0IF = 0;
   768  00011C  94F2               	bcf	intcon,2,c	;volatile
   769                           
   770                           ;mane.c: 228: TMR0 = -40000;
   771  00011E  0E63               	movlw	99
   772  000120  6ED7               	movwf	4055,c	;volatile
   773  000122  0EC0               	movlw	192
   774  000124  6ED6               	movwf	4054,c	;volatile
   775                           
   776                           ;mane.c: 229: flags.interrupt_complete = 0;
   777  000126  9031               	bcf	_flags,0,c
   778                           
   779                           ;mane.c: 230: prev_value = value;
   780  000128  C02E  F02D         	movff	_value,_prev_value
   781                           
   782                           ;mane.c: 231: value = PORTA & 0x3;
   783  00012C  5080               	movf	3968,w,c	;volatile
   784  00012E  0B03               	andlw	3
   785  000130  6E2E               	movwf	_value,c
   786                           
   787                           ;mane.c: 233: if(value != prev_value ||
   788                           ;mane.c: 234: !flags.got_ack)
   789  000132  502D               	movf	_prev_value,w,c
   790  000134  182E               	xorwf	_value,w,c
   791  000136  A4D8               	btfss	status,2,c
   792  000138  D002               	goto	i2u7_40
   793  00013A  B231               	btfsc	_flags,1,c
   794  00013C  D016               	goto	i2l89
   795  00013E                     i2u7_40:
   796                           
   797                           ;mane.c: 235: {
   798                           ;mane.c: 236: flags.got_ack = 0;
   799  00013E  9231               	bcf	_flags,1,c
   800                           
   801                           ;mane.c: 237: prev_value = value;
   802  000140  C02E  F02D         	movff	_value,_prev_value
   803                           
   804                           ;mane.c: 240: tx_state = send_sync;
   805  000144  0EB8               	movlw	low _send_sync
   806  000146  6E2B               	movwf	_tx_state,c
   807  000148  0E02               	movlw	high _send_sync
   808  00014A  6E2C               	movwf	_tx_state+1,c
   809                           
   810                           ;mane.c: 241: LATAbits.LATA6 = !LATAbits.LATA6;
   811  00014C  BC89               	btfsc	3977,6,c	;volatile
   812  00014E  D003               	goto	i2u8_40
   813  000150  6A01               	clrf	??_isr& (0+255),c
   814  000152  2A01               	incf	??_isr& (0+255),f,c
   815  000154  D001               	goto	i2u9_48
   816  000156                     i2u8_40:
   817  000156  6A01               	clrf	??_isr& (0+255),c
   818  000158                     i2u9_48:
   819  000158  3A01               	swapf	??_isr,f,c
   820  00015A  4601               	rlncf	??_isr,f,c
   821  00015C  4601               	rlncf	??_isr,f,c
   822  00015E  5089               	movf	3977,w,c	;volatile
   823  000160  1801               	xorwf	??_isr,w,c
   824  000162  0BBF               	andlw	-65
   825  000164  1801               	xorwf	??_isr,w,c
   826  000166  6E89               	movwf	3977,c	;volatile
   827                           
   828                           ;mane.c: 242: }
   829  000168  D002               	goto	i2l93
   830  00016A                     i2l89:
   831                           
   832                           ;mane.c: 243: else
   833                           ;mane.c: 244: {
   834                           ;mane.c: 246: if(!LATAbits.LATA6)
   835  00016A  AC89               	btfss	3977,6,c	;volatile
   836                           
   837                           ;mane.c: 247: {
   838                           ;mane.c: 248: LATAbits.LATA6 = 1;
   839  00016C  8C89               	bsf	3977,6,c	;volatile
   840  00016E                     i2l93:
   841                           
   842                           ;mane.c: 249: }
   843                           ;mane.c: 250: }
   844                           ;mane.c: 251: }
   845                           ;mane.c: 254: if(PIR1bits.RCIF)
   846  00016E  AA9E               	btfss	3998,5,c	;volatile
   847  000170  D010               	goto	i2u12_49
   848                           
   849                           ;mane.c: 255: {
   850                           ;mane.c: 256: flags.interrupt_complete = 0;
   851  000172  9031               	bcf	_flags,0,c
   852                           
   853                           ;mane.c: 257: serial_in = RCREG;
   854  000174  CFAE F030          	movff	4014,_serial_in	;volatile
   855                           
   856                           ;mane.c: 258: PIR1bits.RCIF = 0;
   857  000178  9A9E               	bcf	3998,5,c	;volatile
   858                           
   859                           ;mane.c: 259: rx_state();
   860  00017A  D801               	call	i2u12_48
   861  00017C  D00A               	goto	i2u12_49
   862  00017E                     i2u12_48:
   863  00017E  0005               	push	
   864  000180  6EFA               	movwf	pclath,c
   865  000182  5029               	movf	_rx_state,w,c
   866  000184  6EFD               	movwf	tosl,c
   867  000186  502A               	movf	_rx_state+1,w,c
   868  000188  6EFE               	movwf	tosh,c
   869  00018A  50F8               	movf	tblptru,w,c
   870  00018C  6EFF               	movwf	tosu,c
   871  00018E  50FA               	movf	pclath,w,c
   872  000190  0012               	return		;indir
   873  000192                     i2u12_49:
   874  000192  A031               	btfss	_flags,0,c
   875  000194  D7C0               	goto	i2l87
   876  000196  C013  F035         	movff	??_isr+18,btemp+3
   877  00019A  C012  F034         	movff	??_isr+17,btemp+2
   878  00019E  C011  F033         	movff	??_isr+16,btemp+1
   879  0001A2  C010  F032         	movff	??_isr+15,btemp
   880  0001A6  C00F  FFF5         	movff	??_isr+14,tablat
   881  0001AA  C00E  FFF8         	movff	??_isr+13,tblptru
   882  0001AE  C00D  FFF7         	movff	??_isr+12,tblptrh
   883  0001B2  C00C  FFF6         	movff	??_isr+11,tblptrl
   884  0001B6  C00B  FFF4         	movff	??_isr+10,prodh
   885  0001BA  C00A  FFF3         	movff	??_isr+9,prodl
   886  0001BE  C009  FFDA         	movff	??_isr+8,fsr2h
   887  0001C2  C008  FFD9         	movff	??_isr+7,fsr2l
   888  0001C6  C007  FFE2         	movff	??_isr+6,fsr1h
   889  0001CA  C006  FFE1         	movff	??_isr+5,fsr1l
   890  0001CE  C005  FFEA         	movff	??_isr+4,fsr0h
   891  0001D2  C004  FFE9         	movff	??_isr+3,fsr0l
   892  0001D6  C003  FFFB         	movff	??_isr+2,pclatu
   893  0001DA  C002  FFFA         	movff	??_isr+1,pclath
   894  0001DE  9232               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
   895  0001E0  0011               	retfie		f
   896  0001E2                     __end_of_isr:
   897                           	opt stack 0
   898                           tosu	equ	0xFFF
   899                           tosh	equ	0xFFE
   900                           tosl	equ	0xFFD
   901                           pclatu	equ	0xFFB
   902                           pclath	equ	0xFFA
   903                           tblptru	equ	0xFF8
   904                           tblptrh	equ	0xFF7
   905                           tblptrl	equ	0xFF6
   906                           tablat	equ	0xFF5
   907                           prodh	equ	0xFF4
   908                           prodl	equ	0xFF3
   909                           intcon	equ	0xFF2
   910                           postinc0	equ	0xFEE
   911                           fsr0h	equ	0xFEA
   912                           fsr0l	equ	0xFE9
   913                           wreg	equ	0xFE8
   914                           postdec1	equ	0xFE5
   915                           fsr1h	equ	0xFE2
   916                           fsr1l	equ	0xFE1
   917                           bsr	equ	0xFE0
   918                           fsr2h	equ	0xFDA
   919                           fsr2l	equ	0xFD9
   920                           status	equ	0xFD8
   921                           
   922 ;; *************** function _read_ack *****************
   923 ;; Defined at:
   924 ;;		line 149 in file "mane.c"
   925 ;; Parameters:    Size  Location     Type
   926 ;;		None
   927 ;; Auto vars:     Size  Location     Type
   928 ;;		None
   929 ;; Return value:  Size  Location     Type
   930 ;;                  1    wreg      void 
   931 ;; Registers used:
   932 ;;		wreg, status,2, status,0
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMRAM   BANK0
   938 ;;      Params:         0       0
   939 ;;      Locals:         0       0
   940 ;;      Temps:          0       0
   941 ;;      Totals:         0       0
   942 ;;Total ram usage:        0 bytes
   943 ;; Hardware stack levels used:    1
   944 ;; This function calls:
   945 ;;		Nothing
   946 ;; This function is called by:
   947 ;;		_read_sync
   948 ;;		_isr
   949 ;; This function uses a non-reentrant model
   950 ;;
   951                           
   952                           	psect	text6
   953  000296                     __ptext6:
   954                           	opt stack 0
   955  000296                     _read_ack:
   956                           	opt stack 27
   957                           
   958                           ;mane.c: 151: if(serial_in == code)
   959                           
   960                           ;incstack = 0
   961  000296  502F               	movf	_code,w,c
   962  000298  1830               	xorwf	_serial_in,w,c
   963  00029A  B4D8               	btfsc	status,2,c
   964                           
   965                           ;mane.c: 152: {
   966                           ;mane.c: 154: flags.got_ack = 1;
   967  00029C  8231               	bsf	_flags,1,c
   968                           
   969                           ;mane.c: 155: }
   970                           ;mane.c: 156: rx_state = read_sync;
   971  00029E  0EA8               	movlw	low _read_sync
   972  0002A0  6E29               	movwf	_rx_state,c
   973  0002A2  0E02               	movlw	high _read_sync
   974  0002A4  6E2A               	movwf	_rx_state+1,c
   975  0002A6  0012               	return		;funcret
   976  0002A8                     __end_of_read_ack:
   977                           	opt stack 0
   978                           tosu	equ	0xFFF
   979                           tosh	equ	0xFFE
   980                           tosl	equ	0xFFD
   981                           pclatu	equ	0xFFB
   982                           pclath	equ	0xFFA
   983                           tblptru	equ	0xFF8
   984                           tblptrh	equ	0xFF7
   985                           tblptrl	equ	0xFF6
   986                           tablat	equ	0xFF5
   987                           prodh	equ	0xFF4
   988                           prodl	equ	0xFF3
   989                           intcon	equ	0xFF2
   990                           postinc0	equ	0xFEE
   991                           fsr0h	equ	0xFEA
   992                           fsr0l	equ	0xFE9
   993                           wreg	equ	0xFE8
   994                           postdec1	equ	0xFE5
   995                           fsr1h	equ	0xFE2
   996                           fsr1l	equ	0xFE1
   997                           bsr	equ	0xFE0
   998                           fsr2h	equ	0xFDA
   999                           fsr2l	equ	0xFD9
  1000                           status	equ	0xFD8
  1001                           
  1002 ;; *************** function _read_sync *****************
  1003 ;; Defined at:
  1004 ;;		line 159 in file "mane.c"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;		None
  1007 ;; Auto vars:     Size  Location     Type
  1008 ;;		None
  1009 ;; Return value:  Size  Location     Type
  1010 ;;                  1    wreg      void 
  1011 ;; Registers used:
  1012 ;;		wreg, status,2, status,0
  1013 ;; Tracked objects:
  1014 ;;		On entry : 0/0
  1015 ;;		On exit  : 0/0
  1016 ;;		Unchanged: 0/0
  1017 ;; Data sizes:     COMRAM   BANK0
  1018 ;;      Params:         0       0
  1019 ;;      Locals:         0       0
  1020 ;;      Temps:          0       0
  1021 ;;      Totals:         0       0
  1022 ;;Total ram usage:        0 bytes
  1023 ;; Hardware stack levels used:    1
  1024 ;; This function calls:
  1025 ;;		Nothing
  1026 ;; This function is called by:
  1027 ;;		_read_ack
  1028 ;;		_isr
  1029 ;; This function uses a non-reentrant model
  1030 ;;
  1031                           
  1032                           	psect	text7
  1033  0002A8                     __ptext7:
  1034                           	opt stack 0
  1035  0002A8                     _read_sync:
  1036                           	opt stack 27
  1037                           
  1038                           ;mane.c: 161: if(serial_in == 0xff)
  1039                           
  1040                           ;incstack = 0
  1041  0002A8  2830               	incf	_serial_in,w,c
  1042  0002AA  A4D8               	btfss	status,2,c
  1043  0002AC  0012               	return	
  1044                           
  1045                           ;mane.c: 162: {
  1046                           ;mane.c: 163: rx_state = read_ack;
  1047  0002AE  0E96               	movlw	low _read_ack
  1048  0002B0  6E29               	movwf	_rx_state,c
  1049  0002B2  0E02               	movlw	high _read_ack
  1050  0002B4  6E2A               	movwf	_rx_state+1,c
  1051  0002B6  0012               	return	
  1052  0002B8                     __end_of_read_sync:
  1053                           	opt stack 0
  1054  0000                     tosu	equ	0xFFF
  1055                           tosh	equ	0xFFE
  1056                           tosl	equ	0xFFD
  1057                           pclatu	equ	0xFFB
  1058                           pclath	equ	0xFFA
  1059                           tblptru	equ	0xFF8
  1060                           tblptrh	equ	0xFF7
  1061                           tblptrl	equ	0xFF6
  1062                           tablat	equ	0xFF5
  1063                           prodh	equ	0xFF4
  1064                           prodl	equ	0xFF3
  1065                           intcon	equ	0xFF2
  1066                           postinc0	equ	0xFEE
  1067                           fsr0h	equ	0xFEA
  1068                           fsr0l	equ	0xFE9
  1069                           wreg	equ	0xFE8
  1070                           postdec1	equ	0xFE5
  1071                           fsr1h	equ	0xFE2
  1072                           fsr1l	equ	0xFE1
  1073                           bsr	equ	0xFE0
  1074                           fsr2h	equ	0xFDA
  1075                           fsr2l	equ	0xFD9
  1076                           status	equ	0xFD8
  1077                           tosu	equ	0xFFF
  1078                           tosh	equ	0xFFE
  1079                           tosl	equ	0xFFD
  1080                           pclatu	equ	0xFFB
  1081                           pclath	equ	0xFFA
  1082                           tblptru	equ	0xFF8
  1083                           tblptrh	equ	0xFF7
  1084                           tblptrl	equ	0xFF6
  1085                           tablat	equ	0xFF5
  1086                           prodh	equ	0xFF4
  1087                           prodl	equ	0xFF3
  1088                           intcon	equ	0xFF2
  1089                           postinc0	equ	0xFEE
  1090                           fsr0h	equ	0xFEA
  1091                           fsr0l	equ	0xFE9
  1092                           wreg	equ	0xFE8
  1093                           postdec1	equ	0xFE5
  1094                           fsr1h	equ	0xFE2
  1095                           fsr1l	equ	0xFE1
  1096                           bsr	equ	0xFE0
  1097                           fsr2h	equ	0xFDA
  1098                           fsr2l	equ	0xFD9
  1099                           status	equ	0xFD8
  1100                           
  1101                           	psect	text8
  1102  000000                     __ptext8:
  1103                           	opt stack 0
  1104                           tosu	equ	0xFFF
  1105                           tosh	equ	0xFFE
  1106                           tosl	equ	0xFFD
  1107                           pclatu	equ	0xFFB
  1108                           pclath	equ	0xFFA
  1109                           tblptru	equ	0xFF8
  1110                           tblptrh	equ	0xFF7
  1111                           tblptrl	equ	0xFF6
  1112                           tablat	equ	0xFF5
  1113                           prodh	equ	0xFF4
  1114                           prodl	equ	0xFF3
  1115                           intcon	equ	0xFF2
  1116                           postinc0	equ	0xFEE
  1117                           fsr0h	equ	0xFEA
  1118                           fsr0l	equ	0xFE9
  1119                           wreg	equ	0xFE8
  1120                           postdec1	equ	0xFE5
  1121                           fsr1h	equ	0xFE2
  1122                           fsr1l	equ	0xFE1
  1123                           bsr	equ	0xFE0
  1124                           fsr2h	equ	0xFDA
  1125                           fsr2l	equ	0xFD9
  1126                           status	equ	0xFD8
  1127                           
  1128                           	psect	rparam
  1129  0000                     tosu	equ	0xFFF
  1130                           tosh	equ	0xFFE
  1131                           tosl	equ	0xFFD
  1132                           pclatu	equ	0xFFB
  1133                           pclath	equ	0xFFA
  1134                           tblptru	equ	0xFF8
  1135                           tblptrh	equ	0xFF7
  1136                           tblptrl	equ	0xFF6
  1137                           tablat	equ	0xFF5
  1138                           prodh	equ	0xFF4
  1139                           prodl	equ	0xFF3
  1140                           intcon	equ	0xFF2
  1141                           postinc0	equ	0xFEE
  1142                           fsr0h	equ	0xFEA
  1143                           fsr0l	equ	0xFE9
  1144                           wreg	equ	0xFE8
  1145                           postdec1	equ	0xFE5
  1146                           fsr1h	equ	0xFE2
  1147                           fsr1l	equ	0xFE1
  1148                           bsr	equ	0xFE0
  1149                           fsr2h	equ	0xFDA
  1150                           fsr2l	equ	0xFD9
  1151                           status	equ	0xFD8
  1152                           
  1153                           	psect	temp
  1154  000032                     btemp:
  1155                           	opt stack 0
  1156  000032                     	ds	1
  1157  0000                     int$flags	set	btemp
  1158  0000                     wtemp6	set	btemp+1
  1159                           tosu	equ	0xFFF
  1160                           tosh	equ	0xFFE
  1161                           tosl	equ	0xFFD
  1162                           pclatu	equ	0xFFB
  1163                           pclath	equ	0xFFA
  1164                           tblptru	equ	0xFF8
  1165                           tblptrh	equ	0xFF7
  1166                           tblptrl	equ	0xFF6
  1167                           tablat	equ	0xFF5
  1168                           prodh	equ	0xFF4
  1169                           prodl	equ	0xFF3
  1170                           intcon	equ	0xFF2
  1171                           postinc0	equ	0xFEE
  1172                           fsr0h	equ	0xFEA
  1173                           fsr0l	equ	0xFE9
  1174                           wreg	equ	0xFE8
  1175                           postdec1	equ	0xFE5
  1176                           fsr1h	equ	0xFE2
  1177                           fsr1l	equ	0xFE1
  1178                           bsr	equ	0xFE0
  1179                           fsr2h	equ	0xFDA
  1180                           fsr2l	equ	0xFD9
  1181                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        6
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     40      49
    BANK0           128      0       0

Pointer List with Targets:

    rx_state	PTR FTN()void  size(2) Largest target is 1
		 -> read_ack(), read_sync(), 

    tx_state	PTR FTN()void  size(2) Largest target is 1
		 -> send_sync(), send_data(), idle(), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr1 in COMRAM

    None.

Critical Paths under _isr in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr1 in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                               _idle *
                          _send_data *
                          _send_sync *
 ---------------------------------------------------------------------------------
 (1) _send_sync                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _send_data                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _idle                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr1                                                21    21      0       0
                                             19 COMRAM    21    21      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                 19    19      0       0
                                              0 COMRAM    19    19      0
                           _read_ack *
                          _read_sync *
 ---------------------------------------------------------------------------------
 (4) _read_sync                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _read_ack                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _idle *
   _send_data *
   _send_sync *

 _isr1 (ROOT)

 _isr (ROOT)
   _read_ack *
   _read_sync *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            80      0       0       3        0.0%
BANK0               80      0       0       4        0.0%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     28      31       1       38.9%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      31       5        0.0%
DATA                 0      0      31       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Oct  7 05:19:39 2021

                     l72 021C                       u48 0226              __CFG_BOR$ON 000000  
                     bsr 000FE0             __CFG_CP0$OFF 000000             __CFG_CP1$OFF 000000  
            __CFG_WDT$ON 000000             __CFG_CPB$OFF 000000             __CFG_CPD$OFF 000000  
                    _isr 0008             __CFG_BORV$27 000000                      tosl 000FFD  
                    wreg 000FE8             __CFG_FSCM$ON 000000             __CFG_IESO$ON 000000  
           __CFG_LVP$OFF 000000                     ?_isr 0001                     i2l93 016E  
                   i2l87 0116                     i2l89 016A                     _TMR0 000FD6  
           __CFG_PWRT$ON 000000             __CFG_STVR$ON 000000                     _code 002F  
                   _idle 02CA                     _isr1 0018                     _main 01E2  
                   fsr0h 000FEA                     fsr1h 000FE2                     fsr2h 000FDA  
                   fsr0l 000FE9                     fsr1l 000FE1                     fsr2l 000FD9  
                   btemp 0032                     prodh 000FF4                     prodl 000FF3  
                   start 00C6            __CFG_MCLRE$ON 000000             ___param_bank 000000  
                  ??_isr 0001                    ?_idle 0001                    ?_isr1 0001  
                  ?_main 0001                    _T0CON 000FD5                    _RCREG 000FAE  
                  _RCSTA 000FAB                    _SPBRG 000FAF                    _PORTA 000F80  
                  _TXREG 000FAD                    _TXSTA 000FAC            __CFG_WRT0$OFF 000000  
          __CFG_WRT1$OFF 000000           __CFG_EBTR0$OFF 000000           __CFG_EBTR1$OFF 000000  
          __CFG_WRTB$OFF 000000            __CFG_WRTC$OFF 000000            __CFG_WRTD$OFF 000000  
         __CFG_EBTRB$OFF 000000                    _flags 0031                    _value 002E  
                  pclath 000FFA                    tablat 000FF5                    status 000FD8  
                  wtemp6 0033          __initialization 023A             __end_of_idle 02CC  
           __end_of_isr1 00C6             __end_of_main 023A                   ??_idle 0029  
                 ??_isr1 0014                   ??_main 0029            __activetblptr 000002  
                 _ADCON1 000FC1                   _OSCCON 000FD3                   i2u7_40 013E  
                 i2u8_40 0156                   i2u9_48 0158         __end_of_read_ack 02A8  
           __pdataCOMRAM 0029                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8               __accesstop 0080  __end_of__initialization 0260  
          ___rparam_used 000001           __pcstackCOMRAM 0001          __CFG_OSC$INTIO2 000000  
     __size_of_read_sync 0010       __size_of_send_data 0028                  _BAUDCTL 000FAA  
     __size_of_send_sync 000C                  i2u12_48 017E                  i2u12_49 0192  
              ?_read_ack 0001                  __Hparam 0000                  __Lparam 0000  
                __pcinit 023A                  __ramtop 0100                  __ptext0 01E2  
                __ptext1 026E                  __ptext2 02CA                  __ptext3 02B8  
                __ptext6 0296                  __ptext7 02A8                  __ptext8 0000  
           __size_of_isr 01DA        __end_of_read_sync 02B8           __pintcode_body 00CA  
   end_of_initialization 0260        __end_of_send_data 0296        __end_of_send_sync 02C4  
          __Lmediumconst 0000                  int_func 00CA               ??_read_ack 0001  
                postdec1 000FE5                  postinc0 000FEE               _prev_value 002D  
              _TRISAbits 000F92            __pidataCOMRAM 02C4      start_initialization 023A  
            __end_of_isr 01E2              __pbssCOMRAM 002F        __size_of_read_ack 0012  
              __pintcode 0008              __pintcodelo 0018                _read_sync 02A8  
               _LATAbits 000F89                 _PIE1bits 000F9D                _send_data 026E  
              _send_sync 02B8                 _PIR1bits 000F9E                _serial_in 0030  
       __CFG_WDTPS$32768 000000                copy_data0 024E               ?_read_sync 0001  
             ?_send_data 0001               ?_send_sync 0001                 __Hrparam 0000  
               __Lrparam 0000            __size_of_idle 0002            __size_of_isr1 00AE  
          __size_of_main 0058                 _read_ack 0296                 int$flags 0032  
               _rx_state 0029                 _tx_state 002B               _INTCONbits 000FF2  
            ??_read_sync 0001                 intlevel1 0000                 intlevel2 0000  
            ??_send_data 0029              ??_send_sync 0029  
