/*
 * REMOTE CONTROL SHUTTER
 * Copyright (C) 2021 Adam Williams <broadcast at earthling dot net>
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 * 
 */





// remote control receiver using XBee
// just copies the serial port to PORTA











// PIC18LF1320 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H
#pragma config OSC = INTIO2     // Oscillator Selection bits (Internal RC oscillator, port function on RA6 and port function on RA7)
#pragma config FSCM = ON        // Fail-Safe Clock Monitor Enable bit (Fail-Safe Clock Monitor enabled)
#pragma config IESO = ON        // Internal External Switchover bit (Internal External Switchover mode enabled)

// CONFIG2L
#pragma config PWRT = ON        // Power-up Timer Enable bit (PWRT enabled)
#pragma config BOR = ON         // Brown-out Reset Enable bit (Brown-out Reset enabled)
#pragma config BORV = 27        // Brown-out Reset Voltage bits (VBOR set to 2.7V)

// CONFIG2H
#pragma config WDT = ON         // Watchdog Timer Enable bit (WDT enabled)
#pragma config WDTPS = 32768    // Watchdog Timer Postscale Select bits (1:32768)

// CONFIG3H
#pragma config MCLRE = ON       // MCLR Pin Enable bit (MCLR pin enabled, RA5 input pin disabled)

// CONFIG4L
#pragma config STVR = ON        // Stack Full/Underflow Reset Enable bit (Stack full/underflow will cause Reset)
#pragma config LVP = OFF        // Low-Voltage ICSP Enable bit (Low-Voltage ICSP disabled)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (00200-000FFFh) not code-protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (001000-001FFFh) not code-protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot Block (000000-0001FFh) not code-protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code-protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (00200-000FFFh) not write-protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (001000-001FFFh) not write-protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write-protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0001FFh) not write-protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write-protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (00200-000FFFh) not protected from table reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (001000-001FFFh) not protected from table reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0001FFh) not protected from table reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include <pic18lf1320.h>
#include <stdint.h>

#define CLOCKSPEED 8000000
#define XBEE_BAUD 115200
// turn LED back on so the user knows it's on
#define TIMEOUT (8000000 / 4 / 65536)

uint8_t value;
uint8_t value2;
uint8_t timeout_counter = TIMEOUT;

void read_sync1();

void (*current_operation)() = read_sync1;

void read_byte2()
{
    if(value == value2)
    {
// want NPN transistors on when switch is low
        value ^= 0b00000011;
        LATAbits.LATA0 = value & 0x1;
        LATAbits.LATA1 = (value & 0x2) ? 1 : 0;
// blink LED
        LATAbits.LATA6 ^= 1;
        timeout_counter = TIMEOUT;
    }

    current_operation = read_sync1;
}

void read_byte1()
{
    value2 = value;
    current_operation = read_byte2;
}


void read_sync2()
{
    if(value == 0xe9)
    {
        current_operation = read_byte1;
    }
    else
    {
        current_operation = read_sync1;
    }
}

void read_sync1()
{
    if(value == 0xff)
    {
        current_operation = read_sync2;
    }
}


void main()
{
    OSCCON = 0b01110000;
// digital mode
    ADCON1 = 0xff;

// LED output
    TRISAbits.TRISA6 = 0;
    LATAbits.LATA6 = 1;

// output mode
    LATAbits.LATA0 = 0;
    LATAbits.LATA1 = 0;
    TRISAbits.TRISA0 = 0;
    TRISAbits.TRISA1 = 0;

// mane timer  1:1 prescaler
    T0CON = 0b10001000;

    RCSTA = 0b10010000;
    TXSTA = 0b00100100;
    BAUDCTL = 0b00001000;
// fudged
    SPBRG = (CLOCKSPEED / (XBEE_BAUD * 4) - 1);


    while(1)
    {
        ClrWdt();
        if(PIR1bits.RCIF)
        {
            value = RCREG;
            current_operation();
        }

        if(INTCONbits.TMR0IF)
        {
            INTCONbits.TMR0IF = 0;
            timeout_counter--;
            if(!timeout_counter)
            {
// turn LED back on
                LATAbits.LATA6 = 1;
                timeout_counter++;
            }
        }
    }
}



















